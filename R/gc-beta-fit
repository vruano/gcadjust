#!/usr/bin/env Rscript

optim.beta = function (d,na.rm=T,nan.rm=T,method="ks") {
  d = as.numeric(d);
  if (length(which(is.na(d))) == 0) {
     if (na.rm) d = d[!is.na(d)] else stop("there are NA values in the input and na.rm != TRUE");
  } 
  if (length(which(is.nan(d))) == 0) {
     if (nan.rm) d = d[!is.nan(d)] else stop("there are NaN values in the input and nan.rm != TRUE");
  }
  if (length(which(d < 0 | d > 1)) != 0) stop("the input values must be strictly in the [0,1] range");
  if (length(d) == 0) stop ("you need to provide at least one value after removing NA and NaN");
  
  objective = if (method == "ks") function(par) {
      t = ks.test(d,function(x) pbeta(x,par[1],par[2]));
      t$statistic[1];
  } else if (method == "lk") function(par) {
      -sum(sapply(d,function(x) dbeta(x,par[1],par[2],log=T)));
  } else stop(paste("unknown method",method,sep=" ")); 

  p.start = c(1,1);
  p.lower = c(0.00001,0.00001);
  p.upper = c(1000,1000);
 
  result = optim(par=p.start,lower=p.lower,upper=p.upper,method="L-BFGS-B",fn=objective);
  result$ks.test = ks.test(d,function(x) dbeta(x,result$par[1],result$par[2]));
  result
} 

#options(error=utils::recover);

require("optparse",quietly=T);
options.spec = list(
  make_option(c("-fl","--fragmentList"),type="character",
            help="name of the gzip file with the list of fragments"),
  make_option(c("-o","--output",type="character",
            help="output directory")),
  make_option(c("-c","--compressed",type="logical",default=NULL)),
  make_option(c("--downSample",type="integer",default=10000)),
  make_option(c("-R","--reference",type="character",default=NULL)),
  make_option(c("-M","--mask",type="character"),default=NULL),
  make_option(c("-L","--intervals",type="character",default=NULL)),
  make_option(c("--simulationCount", type="integer",default=NULL)),
  make_option(c("--simulationExcludeMasked", type="logical",default=T)),
  make_option(c("--sample"), type="character",default=NULL),
  make_option(c("--correct"), type="logical",default=F),
  make_option(c("--biasAnalysis"), type="logical",default=T),
  make_option(c("--binSize"), type="integer",default=1000),
  make_option(c("--binMinMappability", type="numeric",default=0.4))
);

options.parser = OptionParser(usage="usage: %prog [options]", option_list = options.spec,add_help_option = TRUE);
#command.args = commandArgs(trailingOnly=T);

command.args = strsplit("--intervals intervals.bed --fragmentList ../pf-crosses/data/3d7_v3/bwa_default/gc_analysis/ERR019054.frag-list.gz --sample TEST -R ../pf-crosses/data/genome/sanger/version3/September_2012/Pf3D7_v3.2bit -o /tmp/fl1.out --simulationCount 10000 --downSample 10000"," ")[[1]];

if (length(command.args) < 0) {
  print_help(options.parser);
  quit(save="no");
}

options = parse_args(options.parser,args=command.args);
if (is.null(options$sample)) {
  warning("no sample name specified");
}

sampleName = options$sample;
require("FLGCA",quietly=T);

outFile = options$output;
fragmentListFile = options$fragmentList;
downSample = options$downSample;
fragmentListFile.compressed = options$compressed;
referenceFile = options$reference;
referenceMaskFile = if (!is.null(options$referenceMask)) options$referenceMask else referenceFile;
intervalsFile = options$intervals;
simulationCount = options$simulationCount;
doBiasAnalysis = options$biasAnalysis;
correct = options$correct;
binSize = options$binSize;
binMinMappability = options$binMinMappability;
excludeMasked = if (is.null(options$simulationExcludeMasked)) TRUE else options$simulationExcludeMasked;

if (is.null(fragmentListFile)) {
  write("you need to specify a fragment list file (--fragmentFile FILE)",stderr());
  quit(save="no");
}
if (is.null(referenceFile)) {
  write("you need to specify a reference 2bit formated file (--reference FILE)",stderr());
  quit(save="no");
}
if (is.null(outFile)) {
  write("you need to specify an output file name prefix (--output PREFIX)",stderr());
  quit(save="no");
}

if (!file.exists(fragmentListFile)) stop("fragment list file name provided does not exists");

if (is.null(fragmentListFile.compressed)) fragmentListFile.compressed = length(grep("\\.gz$",fragmentListFile)) > 0; 
if (fragmentListFile.compressed) {
  fragmentListFile.conn = gzfile(fragmentListFile);
} else {
  fragmentListFile.conn = file(fragmentListFile);
}

if (!file.exists(referenceFile)) stop("reference file provided does not exists");
if (!is.null(intervalsFile)) if (!file.exists(intervalsFile)) stop("intervals file provided does not exists");
  
if (!is.null(simulationCount) & simulationCount <= 0) stop("the simulation count cannot be less than 1");  


reference.2bit = TwoBitFile(referenceFile);
reference = import.2bit(reference.2bit);
reference.seqinfo = seqinfo(reference);
referenceMask.2bit = TwoBitFile(referenceMaskFile);
referenceMask = import.2bit(referenceMask.2bit);
referenceMask.N = sapply(strsplit(as.character(referenceMask),""), function(x) { x == "N" });
reference.GC = sapply(strsplit(as.character(reference),""), function(x) { x == "G" | x == "C" });

reference.seqtable = as.data.frame(reference.seqinfo);
reference.range.list = IRangesList(sapply(row.names(reference.seqtable),USE.NAMES=T, function(seqname) {
  seqlength = reference.seqtable[seqname,]$seqlengths;
  IRanges(start=1,end=seqlength,width=seqlength);
}));

if (!is.null(intervalsFile)) {
  range.list = ranges(import.bed(intervalsFile));
} else {
  range.list = reference.range.list;
}

range.list.widths = sapply(range.list,simplify=T,function(x) { sum(width(x)) });
print(range.list.widths);
range.list.total.width = sum(range.list.widths);

if (is.null(sampleName)) sampleName = "<unknown>";

#### Actual work ###

results = fragmentListAnalyse("TEST",fragmentListFile=fragmentListFile.conn,downSample=downSample,ranges=range.list);
if (is.null(simulationCount)) simulationCount = nrow(results$data);
if (simulationCount > nrow(results$data)) simulationCount = nrow(results$data);
simulation = referenceSimulation(results,as.integer(simulationCount),reference=reference,referenceMask=referenceMask,excludeMasked=excludeMasked,ranges=range.list);

ref.err = runif(nrow(simulation)) / simulation$N.COUNT;
sam.err = runif(nrow(results$data)) / results$data$N.COUNT;
ref.gc = simulation$GC.COUNT/simulation$N.COUNT + ref.err;
sam.gc = results$data$GC.COUNT/results$data$N.COUNT + sam.err;

if (downSample > 0) {
  ref.gc = sample(ref.gc,downSample,replace=T);
  sam.gc = sample(sam.gc,downSample,replace=T);
} 

ref.opt = optim.beta(ref.gc,method="lk"); 
sam.opt = optim.beta(sam.gc,method="lk");

out.plot.file = paste(outFile,".svg");
svg(outFile);

z = seq(0,1,0.01);

ref.density = dbeta(z,ref.opt$par[1],ref.opt$par[2]);
sam.density = dbeta(z,sam.opt$par[1],sam.opt$par[2]);
samref.ratio = sam.density / ref.density
all.density = c(ref.density,sam.density);
all.density = all.density[is.finite(all.density)];
density.range = range(all.density);
print(str(ref.gc))
print(str(sam.gc))
print(summary(ref.gc));
print(summary(sam.gc));
plot(z*100,ref.density,type="l",main=sampleName,xlab="GC %",xlim=c(0,100),ylim=c(0,density.range[2]),col="red");
lines(z*100,sam.density,col="blue");
lines(z*100,samref.ratio,col="green");

ref.den = density(ref.gc);
sam.den = density(sam.gc);

lines(ref.den$x * 100,ref.den$y,col="red");
lines(sam.den$x * 100,sam.den$y,col="green");
dev.off();

print(ref.opt);
print(sam.opt);

